/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_SCMI_POWER_DOMAIN_REQ_EXTRA_H
#define _MOCKMOD_SCMI_POWER_DOMAIN_REQ_EXTRA_H

#include "unity.h"
#include "mod_scmi_power_domain_req_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_scmi_power_domain_req_extra_Init(void);
void Mockmod_scmi_power_domain_req_extra_Destroy(void);
void Mockmod_scmi_power_domain_req_extra_Verify(void);


typedef void(*cmock_mod_scmi_power_domain_req_extra_func_ptr1)(uintptr_t param);


#define scmi_send_message_IgnoreAndReturn(cmock_retval) scmi_send_message_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void scmi_send_message_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define scmi_send_message_StopIgnore() scmi_send_message_CMockStopIgnore()
void scmi_send_message_CMockStopIgnore(void);
#define scmi_send_message_ExpectAnyArgsAndReturn(cmock_retval) scmi_send_message_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void scmi_send_message_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define scmi_send_message_ExpectAndReturn(scmi_message_id, scmi_protocol_id, token, service_id, payload, payload_size, request_ack_by_interrupt, cmock_retval) scmi_send_message_CMockExpectAndReturn(__LINE__, scmi_message_id, scmi_protocol_id, token, service_id, payload, payload_size, request_ack_by_interrupt, cmock_retval)
void scmi_send_message_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t scmi_message_id, uint8_t scmi_protocol_id, uint8_t token, fwk_id_t service_id, const void* payload, size_t payload_size, bool request_ack_by_interrupt, int cmock_to_return);
typedef int (* CMOCK_scmi_send_message_CALLBACK)(uint8_t scmi_message_id, uint8_t scmi_protocol_id, uint8_t token, fwk_id_t service_id, const void* payload, size_t payload_size, bool request_ack_by_interrupt, int cmock_num_calls);
void scmi_send_message_AddCallback(CMOCK_scmi_send_message_CALLBACK Callback);
void scmi_send_message_Stub(CMOCK_scmi_send_message_CALLBACK Callback);
#define scmi_send_message_StubWithCallback scmi_send_message_Stub
#define scmi_send_message_ExpectWithArrayAndReturn(scmi_message_id, scmi_protocol_id, token, service_id, payload, payload_Depth, payload_size, request_ack_by_interrupt, cmock_retval) scmi_send_message_CMockExpectWithArrayAndReturn(__LINE__, scmi_message_id, scmi_protocol_id, token, service_id, payload, payload_Depth, payload_size, request_ack_by_interrupt, cmock_retval)
void scmi_send_message_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t scmi_message_id, uint8_t scmi_protocol_id, uint8_t token, fwk_id_t service_id, const void* payload, int payload_Depth, size_t payload_size, bool request_ack_by_interrupt, int cmock_to_return);
#define scmi_send_message_IgnoreArg_scmi_message_id() scmi_send_message_CMockIgnoreArg_scmi_message_id(__LINE__)
void scmi_send_message_CMockIgnoreArg_scmi_message_id(UNITY_LINE_TYPE cmock_line);
#define scmi_send_message_IgnoreArg_scmi_protocol_id() scmi_send_message_CMockIgnoreArg_scmi_protocol_id(__LINE__)
void scmi_send_message_CMockIgnoreArg_scmi_protocol_id(UNITY_LINE_TYPE cmock_line);
#define scmi_send_message_IgnoreArg_token() scmi_send_message_CMockIgnoreArg_token(__LINE__)
void scmi_send_message_CMockIgnoreArg_token(UNITY_LINE_TYPE cmock_line);
#define scmi_send_message_IgnoreArg_service_id() scmi_send_message_CMockIgnoreArg_service_id(__LINE__)
void scmi_send_message_CMockIgnoreArg_service_id(UNITY_LINE_TYPE cmock_line);
#define scmi_send_message_IgnoreArg_payload() scmi_send_message_CMockIgnoreArg_payload(__LINE__)
void scmi_send_message_CMockIgnoreArg_payload(UNITY_LINE_TYPE cmock_line);
#define scmi_send_message_IgnoreArg_payload_size() scmi_send_message_CMockIgnoreArg_payload_size(__LINE__)
void scmi_send_message_CMockIgnoreArg_payload_size(UNITY_LINE_TYPE cmock_line);
#define scmi_send_message_IgnoreArg_request_ack_by_interrupt() scmi_send_message_CMockIgnoreArg_request_ack_by_interrupt(__LINE__)
void scmi_send_message_CMockIgnoreArg_request_ack_by_interrupt(UNITY_LINE_TYPE cmock_line);
#define response_message_handler_IgnoreAndReturn(cmock_retval) response_message_handler_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void response_message_handler_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define response_message_handler_StopIgnore() response_message_handler_CMockStopIgnore()
void response_message_handler_CMockStopIgnore(void);
#define response_message_handler_ExpectAnyArgsAndReturn(cmock_retval) response_message_handler_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void response_message_handler_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define response_message_handler_ExpectAndReturn(service_id, cmock_retval) response_message_handler_CMockExpectAndReturn(__LINE__, service_id, cmock_retval)
void response_message_handler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t service_id, int cmock_to_return);
typedef int (* CMOCK_response_message_handler_CALLBACK)(fwk_id_t service_id, int cmock_num_calls);
void response_message_handler_AddCallback(CMOCK_response_message_handler_CALLBACK Callback);
void response_message_handler_Stub(CMOCK_response_message_handler_CALLBACK Callback);
#define response_message_handler_StubWithCallback response_message_handler_Stub
#define response_message_handler_IgnoreArg_service_id() response_message_handler_CMockIgnoreArg_service_id(__LINE__)
void response_message_handler_CMockIgnoreArg_service_id(UNITY_LINE_TYPE cmock_line);
#define report_power_state_transition_IgnoreAndReturn(cmock_retval) report_power_state_transition_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void report_power_state_transition_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define report_power_state_transition_StopIgnore() report_power_state_transition_CMockStopIgnore()
void report_power_state_transition_CMockStopIgnore(void);
#define report_power_state_transition_ExpectAnyArgsAndReturn(cmock_retval) report_power_state_transition_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void report_power_state_transition_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define report_power_state_transition_ExpectAndReturn(pd_id, state, cmock_retval) report_power_state_transition_CMockExpectAndReturn(__LINE__, pd_id, state, cmock_retval)
void report_power_state_transition_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t pd_id, unsigned int state, int cmock_to_return);
typedef int (* CMOCK_report_power_state_transition_CALLBACK)(fwk_id_t pd_id, unsigned int state, int cmock_num_calls);
void report_power_state_transition_AddCallback(CMOCK_report_power_state_transition_CALLBACK Callback);
void report_power_state_transition_Stub(CMOCK_report_power_state_transition_CALLBACK Callback);
#define report_power_state_transition_StubWithCallback report_power_state_transition_Stub
#define report_power_state_transition_IgnoreArg_pd_id() report_power_state_transition_CMockIgnoreArg_pd_id(__LINE__)
void report_power_state_transition_CMockIgnoreArg_pd_id(UNITY_LINE_TYPE cmock_line);
#define report_power_state_transition_IgnoreArg_state() report_power_state_transition_CMockIgnoreArg_state(__LINE__)
void report_power_state_transition_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreAndReturn(cmock_retval) start_alarm_api_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void start_alarm_api_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define start_alarm_api_StopIgnore() start_alarm_api_CMockStopIgnore()
void start_alarm_api_CMockStopIgnore(void);
#define start_alarm_api_ExpectAnyArgsAndReturn(cmock_retval) start_alarm_api_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void start_alarm_api_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define start_alarm_api_ExpectAndReturn(alarm_id, milliseconds, type, callback, param, cmock_retval) start_alarm_api_CMockExpectAndReturn(__LINE__, alarm_id, milliseconds, type, callback, param, cmock_retval)
void start_alarm_api_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t alarm_id, unsigned int milliseconds, enum mod_timer_alarm_type type, cmock_mod_scmi_power_domain_req_extra_func_ptr1 callback, uintptr_t param, int cmock_to_return);
typedef int (* CMOCK_start_alarm_api_CALLBACK)(fwk_id_t alarm_id, unsigned int milliseconds, enum mod_timer_alarm_type type, cmock_mod_scmi_power_domain_req_extra_func_ptr1 callback, uintptr_t param, int cmock_num_calls);
void start_alarm_api_AddCallback(CMOCK_start_alarm_api_CALLBACK Callback);
void start_alarm_api_Stub(CMOCK_start_alarm_api_CALLBACK Callback);
#define start_alarm_api_StubWithCallback start_alarm_api_Stub
#define start_alarm_api_IgnoreArg_alarm_id() start_alarm_api_CMockIgnoreArg_alarm_id(__LINE__)
void start_alarm_api_CMockIgnoreArg_alarm_id(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_milliseconds() start_alarm_api_CMockIgnoreArg_milliseconds(__LINE__)
void start_alarm_api_CMockIgnoreArg_milliseconds(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_type() start_alarm_api_CMockIgnoreArg_type(__LINE__)
void start_alarm_api_CMockIgnoreArg_type(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_callback() start_alarm_api_CMockIgnoreArg_callback(__LINE__)
void start_alarm_api_CMockIgnoreArg_callback(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_param() start_alarm_api_CMockIgnoreArg_param(__LINE__)
void start_alarm_api_CMockIgnoreArg_param(UNITY_LINE_TYPE cmock_line);
#define stop_alarm_api_IgnoreAndReturn(cmock_retval) stop_alarm_api_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void stop_alarm_api_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define stop_alarm_api_StopIgnore() stop_alarm_api_CMockStopIgnore()
void stop_alarm_api_CMockStopIgnore(void);
#define stop_alarm_api_ExpectAnyArgsAndReturn(cmock_retval) stop_alarm_api_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void stop_alarm_api_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define stop_alarm_api_ExpectAndReturn(alarm_id, cmock_retval) stop_alarm_api_CMockExpectAndReturn(__LINE__, alarm_id, cmock_retval)
void stop_alarm_api_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t alarm_id, int cmock_to_return);
typedef int (* CMOCK_stop_alarm_api_CALLBACK)(fwk_id_t alarm_id, int cmock_num_calls);
void stop_alarm_api_AddCallback(CMOCK_stop_alarm_api_CALLBACK Callback);
void stop_alarm_api_Stub(CMOCK_stop_alarm_api_CALLBACK Callback);
#define stop_alarm_api_StubWithCallback stop_alarm_api_Stub
#define stop_alarm_api_IgnoreArg_alarm_id() stop_alarm_api_CMockIgnoreArg_alarm_id(__LINE__)
void stop_alarm_api_CMockIgnoreArg_alarm_id(UNITY_LINE_TYPE cmock_line);
#define fake_message_handler_IgnoreAndReturn(cmock_retval) fake_message_handler_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void fake_message_handler_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define fake_message_handler_StopIgnore() fake_message_handler_CMockStopIgnore()
void fake_message_handler_CMockStopIgnore(void);
#define fake_message_handler_ExpectAnyArgsAndReturn(cmock_retval) fake_message_handler_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void fake_message_handler_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define fake_message_handler_ExpectAndReturn(service_id, payload, payload_size, cmock_retval) fake_message_handler_CMockExpectAndReturn(__LINE__, service_id, payload, payload_size, cmock_retval)
void fake_message_handler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t service_id, const void* payload, size_t payload_size, int cmock_to_return);
typedef int (* CMOCK_fake_message_handler_CALLBACK)(fwk_id_t service_id, const void* payload, size_t payload_size, int cmock_num_calls);
void fake_message_handler_AddCallback(CMOCK_fake_message_handler_CALLBACK Callback);
void fake_message_handler_Stub(CMOCK_fake_message_handler_CALLBACK Callback);
#define fake_message_handler_StubWithCallback fake_message_handler_Stub
#define fake_message_handler_ExpectWithArrayAndReturn(service_id, payload, payload_Depth, payload_size, cmock_retval) fake_message_handler_CMockExpectWithArrayAndReturn(__LINE__, service_id, payload, payload_Depth, payload_size, cmock_retval)
void fake_message_handler_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t service_id, const void* payload, int payload_Depth, size_t payload_size, int cmock_to_return);
#define fake_message_handler_IgnoreArg_service_id() fake_message_handler_CMockIgnoreArg_service_id(__LINE__)
void fake_message_handler_CMockIgnoreArg_service_id(UNITY_LINE_TYPE cmock_line);
#define fake_message_handler_IgnoreArg_payload() fake_message_handler_CMockIgnoreArg_payload(__LINE__)
void fake_message_handler_CMockIgnoreArg_payload(UNITY_LINE_TYPE cmock_line);
#define fake_message_handler_IgnoreArg_payload_size() fake_message_handler_CMockIgnoreArg_payload_size(__LINE__)
void fake_message_handler_CMockIgnoreArg_payload_size(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
