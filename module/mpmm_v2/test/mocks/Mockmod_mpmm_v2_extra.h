/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_MPMM_V2_EXTRA_H
#define _MOCKMOD_MPMM_V2_EXTRA_H

#include "unity.h"
#include "mod_mpmm_v2_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_mpmm_v2_extra_Init(void);
void Mockmod_mpmm_v2_extra_Destroy(void);
void Mockmod_mpmm_v2_extra_Verify(void);




#define amu_mmap_get_counters_IgnoreAndReturn(cmock_retval) amu_mmap_get_counters_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void amu_mmap_get_counters_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define amu_mmap_get_counters_StopIgnore() amu_mmap_get_counters_CMockStopIgnore()
void amu_mmap_get_counters_CMockStopIgnore(void);
#define amu_mmap_get_counters_ExpectAnyArgsAndReturn(cmock_retval) amu_mmap_get_counters_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void amu_mmap_get_counters_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define amu_mmap_get_counters_ExpectAndReturn(start_counter_id, counter_buff, num_counter, cmock_retval) amu_mmap_get_counters_CMockExpectAndReturn(__LINE__, start_counter_id, counter_buff, num_counter, cmock_retval)
void amu_mmap_get_counters_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t start_counter_id, uint64_t* counter_buff, size_t num_counter, int cmock_to_return);
typedef int (* CMOCK_amu_mmap_get_counters_CALLBACK)(fwk_id_t start_counter_id, uint64_t* counter_buff, size_t num_counter, int cmock_num_calls);
void amu_mmap_get_counters_AddCallback(CMOCK_amu_mmap_get_counters_CALLBACK Callback);
void amu_mmap_get_counters_Stub(CMOCK_amu_mmap_get_counters_CALLBACK Callback);
#define amu_mmap_get_counters_StubWithCallback amu_mmap_get_counters_Stub
#define amu_mmap_get_counters_ExpectWithArrayAndReturn(start_counter_id, counter_buff, counter_buff_Depth, num_counter, cmock_retval) amu_mmap_get_counters_CMockExpectWithArrayAndReturn(__LINE__, start_counter_id, counter_buff, counter_buff_Depth, num_counter, cmock_retval)
void amu_mmap_get_counters_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t start_counter_id, uint64_t* counter_buff, int counter_buff_Depth, size_t num_counter, int cmock_to_return);
#define amu_mmap_get_counters_ReturnThruPtr_counter_buff(counter_buff) amu_mmap_get_counters_CMockReturnMemThruPtr_counter_buff(__LINE__, counter_buff, sizeof(uint64_t))
#define amu_mmap_get_counters_ReturnArrayThruPtr_counter_buff(counter_buff, cmock_len) amu_mmap_get_counters_CMockReturnMemThruPtr_counter_buff(__LINE__, counter_buff, cmock_len * sizeof(*counter_buff))
#define amu_mmap_get_counters_ReturnMemThruPtr_counter_buff(counter_buff, cmock_size) amu_mmap_get_counters_CMockReturnMemThruPtr_counter_buff(__LINE__, counter_buff, cmock_size)
void amu_mmap_get_counters_CMockReturnMemThruPtr_counter_buff(UNITY_LINE_TYPE cmock_line, uint64_t* counter_buff, size_t cmock_size);
#define amu_mmap_get_counters_IgnoreArg_start_counter_id() amu_mmap_get_counters_CMockIgnoreArg_start_counter_id(__LINE__)
void amu_mmap_get_counters_CMockIgnoreArg_start_counter_id(UNITY_LINE_TYPE cmock_line);
#define amu_mmap_get_counters_IgnoreArg_counter_buff() amu_mmap_get_counters_CMockIgnoreArg_counter_buff(__LINE__)
void amu_mmap_get_counters_CMockIgnoreArg_counter_buff(UNITY_LINE_TYPE cmock_line);
#define amu_mmap_get_counters_IgnoreArg_num_counter() amu_mmap_get_counters_CMockIgnoreArg_num_counter(__LINE__)
void amu_mmap_get_counters_CMockIgnoreArg_num_counter(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
