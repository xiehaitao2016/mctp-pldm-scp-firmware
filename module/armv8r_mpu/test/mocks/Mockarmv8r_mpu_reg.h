/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKARMV8R_MPU_REG_H
#define _MOCKARMV8R_MPU_REG_H

#include "unity.h"
#include "armv8r_mpu_reg.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockarmv8r_mpu_reg_Init(void);
void Mockarmv8r_mpu_reg_Destroy(void);
void Mockarmv8r_mpu_reg_Verify(void);




#define read_mair_el2_IgnoreAndReturn(cmock_retval) read_mair_el2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void read_mair_el2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint64_t cmock_to_return);
#define read_mair_el2_StopIgnore() read_mair_el2_CMockStopIgnore()
void read_mair_el2_CMockStopIgnore(void);
#define read_mair_el2_ExpectAndReturn(cmock_retval) read_mair_el2_CMockExpectAndReturn(__LINE__, cmock_retval)
void read_mair_el2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint64_t cmock_to_return);
typedef uint64_t (* CMOCK_read_mair_el2_CALLBACK)(int cmock_num_calls);
void read_mair_el2_AddCallback(CMOCK_read_mair_el2_CALLBACK Callback);
void read_mair_el2_Stub(CMOCK_read_mair_el2_CALLBACK Callback);
#define read_mair_el2_StubWithCallback read_mair_el2_Stub
#define write_mair_el2_Ignore() write_mair_el2_CMockIgnore()
void write_mair_el2_CMockIgnore(void);
#define write_mair_el2_StopIgnore() write_mair_el2_CMockStopIgnore()
void write_mair_el2_CMockStopIgnore(void);
#define write_mair_el2_ExpectAnyArgs() write_mair_el2_CMockExpectAnyArgs(__LINE__)
void write_mair_el2_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define write_mair_el2_Expect(cmock_arg1) write_mair_el2_CMockExpect(__LINE__, cmock_arg1)
void write_mair_el2_CMockExpect(UNITY_LINE_TYPE cmock_line, uint64_t cmock_arg1);
typedef void (* CMOCK_write_mair_el2_CALLBACK)(uint64_t cmock_arg1, int cmock_num_calls);
void write_mair_el2_AddCallback(CMOCK_write_mair_el2_CALLBACK Callback);
void write_mair_el2_Stub(CMOCK_write_mair_el2_CALLBACK Callback);
#define write_mair_el2_StubWithCallback write_mair_el2_Stub
#define write_mair_el2_IgnoreArg_cmock_arg1() write_mair_el2_CMockIgnoreArg_cmock_arg1(__LINE__)
void write_mair_el2_CMockIgnoreArg_cmock_arg1(UNITY_LINE_TYPE cmock_line);
#define read_mpuir_el2_IgnoreAndReturn(cmock_retval) read_mpuir_el2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void read_mpuir_el2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint64_t cmock_to_return);
#define read_mpuir_el2_StopIgnore() read_mpuir_el2_CMockStopIgnore()
void read_mpuir_el2_CMockStopIgnore(void);
#define read_mpuir_el2_ExpectAndReturn(cmock_retval) read_mpuir_el2_CMockExpectAndReturn(__LINE__, cmock_retval)
void read_mpuir_el2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint64_t cmock_to_return);
typedef uint64_t (* CMOCK_read_mpuir_el2_CALLBACK)(int cmock_num_calls);
void read_mpuir_el2_AddCallback(CMOCK_read_mpuir_el2_CALLBACK Callback);
void read_mpuir_el2_Stub(CMOCK_read_mpuir_el2_CALLBACK Callback);
#define read_mpuir_el2_StubWithCallback read_mpuir_el2_Stub
#define write_prbar_el2_Ignore() write_prbar_el2_CMockIgnore()
void write_prbar_el2_CMockIgnore(void);
#define write_prbar_el2_StopIgnore() write_prbar_el2_CMockStopIgnore()
void write_prbar_el2_CMockStopIgnore(void);
#define write_prbar_el2_ExpectAnyArgs() write_prbar_el2_CMockExpectAnyArgs(__LINE__)
void write_prbar_el2_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define write_prbar_el2_Expect(cmock_arg1) write_prbar_el2_CMockExpect(__LINE__, cmock_arg1)
void write_prbar_el2_CMockExpect(UNITY_LINE_TYPE cmock_line, uint64_t cmock_arg1);
typedef void (* CMOCK_write_prbar_el2_CALLBACK)(uint64_t cmock_arg1, int cmock_num_calls);
void write_prbar_el2_AddCallback(CMOCK_write_prbar_el2_CALLBACK Callback);
void write_prbar_el2_Stub(CMOCK_write_prbar_el2_CALLBACK Callback);
#define write_prbar_el2_StubWithCallback write_prbar_el2_Stub
#define write_prbar_el2_IgnoreArg_cmock_arg1() write_prbar_el2_CMockIgnoreArg_cmock_arg1(__LINE__)
void write_prbar_el2_CMockIgnoreArg_cmock_arg1(UNITY_LINE_TYPE cmock_line);
#define write_prlar_el2_Ignore() write_prlar_el2_CMockIgnore()
void write_prlar_el2_CMockIgnore(void);
#define write_prlar_el2_StopIgnore() write_prlar_el2_CMockStopIgnore()
void write_prlar_el2_CMockStopIgnore(void);
#define write_prlar_el2_ExpectAnyArgs() write_prlar_el2_CMockExpectAnyArgs(__LINE__)
void write_prlar_el2_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define write_prlar_el2_Expect(cmock_arg1) write_prlar_el2_CMockExpect(__LINE__, cmock_arg1)
void write_prlar_el2_CMockExpect(UNITY_LINE_TYPE cmock_line, uint64_t cmock_arg1);
typedef void (* CMOCK_write_prlar_el2_CALLBACK)(uint64_t cmock_arg1, int cmock_num_calls);
void write_prlar_el2_AddCallback(CMOCK_write_prlar_el2_CALLBACK Callback);
void write_prlar_el2_Stub(CMOCK_write_prlar_el2_CALLBACK Callback);
#define write_prlar_el2_StubWithCallback write_prlar_el2_Stub
#define write_prlar_el2_IgnoreArg_cmock_arg1() write_prlar_el2_CMockIgnoreArg_cmock_arg1(__LINE__)
void write_prlar_el2_CMockIgnoreArg_cmock_arg1(UNITY_LINE_TYPE cmock_line);
#define write_prselr_el2_Ignore() write_prselr_el2_CMockIgnore()
void write_prselr_el2_CMockIgnore(void);
#define write_prselr_el2_StopIgnore() write_prselr_el2_CMockStopIgnore()
void write_prselr_el2_CMockStopIgnore(void);
#define write_prselr_el2_ExpectAnyArgs() write_prselr_el2_CMockExpectAnyArgs(__LINE__)
void write_prselr_el2_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define write_prselr_el2_Expect(cmock_arg1) write_prselr_el2_CMockExpect(__LINE__, cmock_arg1)
void write_prselr_el2_CMockExpect(UNITY_LINE_TYPE cmock_line, uint64_t cmock_arg1);
typedef void (* CMOCK_write_prselr_el2_CALLBACK)(uint64_t cmock_arg1, int cmock_num_calls);
void write_prselr_el2_AddCallback(CMOCK_write_prselr_el2_CALLBACK Callback);
void write_prselr_el2_Stub(CMOCK_write_prselr_el2_CALLBACK Callback);
#define write_prselr_el2_StubWithCallback write_prselr_el2_Stub
#define write_prselr_el2_IgnoreArg_cmock_arg1() write_prselr_el2_CMockIgnoreArg_cmock_arg1(__LINE__)
void write_prselr_el2_CMockIgnoreArg_cmock_arg1(UNITY_LINE_TYPE cmock_line);
#define read_sctlr_el2_IgnoreAndReturn(cmock_retval) read_sctlr_el2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void read_sctlr_el2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint64_t cmock_to_return);
#define read_sctlr_el2_StopIgnore() read_sctlr_el2_CMockStopIgnore()
void read_sctlr_el2_CMockStopIgnore(void);
#define read_sctlr_el2_ExpectAndReturn(cmock_retval) read_sctlr_el2_CMockExpectAndReturn(__LINE__, cmock_retval)
void read_sctlr_el2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint64_t cmock_to_return);
typedef uint64_t (* CMOCK_read_sctlr_el2_CALLBACK)(int cmock_num_calls);
void read_sctlr_el2_AddCallback(CMOCK_read_sctlr_el2_CALLBACK Callback);
void read_sctlr_el2_Stub(CMOCK_read_sctlr_el2_CALLBACK Callback);
#define read_sctlr_el2_StubWithCallback read_sctlr_el2_Stub
#define write_sctlr_el2_Ignore() write_sctlr_el2_CMockIgnore()
void write_sctlr_el2_CMockIgnore(void);
#define write_sctlr_el2_StopIgnore() write_sctlr_el2_CMockStopIgnore()
void write_sctlr_el2_CMockStopIgnore(void);
#define write_sctlr_el2_ExpectAnyArgs() write_sctlr_el2_CMockExpectAnyArgs(__LINE__)
void write_sctlr_el2_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define write_sctlr_el2_Expect(cmock_arg1) write_sctlr_el2_CMockExpect(__LINE__, cmock_arg1)
void write_sctlr_el2_CMockExpect(UNITY_LINE_TYPE cmock_line, uint64_t cmock_arg1);
typedef void (* CMOCK_write_sctlr_el2_CALLBACK)(uint64_t cmock_arg1, int cmock_num_calls);
void write_sctlr_el2_AddCallback(CMOCK_write_sctlr_el2_CALLBACK Callback);
void write_sctlr_el2_Stub(CMOCK_write_sctlr_el2_CALLBACK Callback);
#define write_sctlr_el2_StubWithCallback write_sctlr_el2_Stub
#define write_sctlr_el2_IgnoreArg_cmock_arg1() write_sctlr_el2_CMockIgnoreArg_cmock_arg1(__LINE__)
void write_sctlr_el2_CMockIgnoreArg_cmock_arg1(UNITY_LINE_TYPE cmock_line);
#define barrier_dsync_fence_full_Ignore() barrier_dsync_fence_full_CMockIgnore()
void barrier_dsync_fence_full_CMockIgnore(void);
#define barrier_dsync_fence_full_StopIgnore() barrier_dsync_fence_full_CMockStopIgnore()
void barrier_dsync_fence_full_CMockStopIgnore(void);
#define barrier_dsync_fence_full_Expect() barrier_dsync_fence_full_CMockExpect(__LINE__)
void barrier_dsync_fence_full_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_barrier_dsync_fence_full_CALLBACK)(int cmock_num_calls);
void barrier_dsync_fence_full_AddCallback(CMOCK_barrier_dsync_fence_full_CALLBACK Callback);
void barrier_dsync_fence_full_Stub(CMOCK_barrier_dsync_fence_full_CALLBACK Callback);
#define barrier_dsync_fence_full_StubWithCallback barrier_dsync_fence_full_Stub
#define barrier_isync_fence_full_Ignore() barrier_isync_fence_full_CMockIgnore()
void barrier_isync_fence_full_CMockIgnore(void);
#define barrier_isync_fence_full_StopIgnore() barrier_isync_fence_full_CMockStopIgnore()
void barrier_isync_fence_full_CMockStopIgnore(void);
#define barrier_isync_fence_full_Expect() barrier_isync_fence_full_CMockExpect(__LINE__)
void barrier_isync_fence_full_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_barrier_isync_fence_full_CALLBACK)(int cmock_num_calls);
void barrier_isync_fence_full_AddCallback(CMOCK_barrier_isync_fence_full_CALLBACK Callback);
void barrier_isync_fence_full_Stub(CMOCK_barrier_isync_fence_full_CALLBACK Callback);
#define barrier_isync_fence_full_StubWithCallback barrier_isync_fence_full_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
